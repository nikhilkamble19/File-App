import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';
import { Router } from '@angular/router';
import { Part } from '../shared/part.model';
import { PartService } from '../shared/part.service';
import { FinshedGood } from '../shared/finishedgoods.model';
import { LoaderService } from '../shared/loader.service';
import { FinshedGoodService } from '../shared/finishedgoods.service';
import { UtilityService } from '../shared/utility.service';

@Component({
  selector: 'app-fgbarcode',
  templateUrl: './fgbarcode.component.html',
  styleUrls: ['./fgbarcode.component.css']
})
export class FgbarcodeComponent implements OnInit {
  
  model: FinshedGood;
  parts: Array<Part> = [];
  partsMap: Array<Object> = [];
  partnumber: string;
  partdescription: string;
  //partList: JSON;

  constructor(private partService: PartService,
  private loaderService: LoaderService,
  private FinshedGoodService: FinshedGoodService,
  private utilityService: UtilityService) { 
  this.model = new FinshedGood('','');
  }

  ngOnInit() {
  this.fetchPartLists();
  }
  onSubmit(){
  var part_json = {
      "part": this.model.part_number["_id"],
      "quantity": this.model.quantity,
    };
    //part_json["quantity"] = this.model.quantity;
    //console.log(quantity);
    this.savePart(part_json);

    //this.utilityService.printOnZebraPrinterWithParams();
  }

  savePart(part_json: any){
  	console.log(part_json);
  	this.loaderService.display(true);
  	console.log("Inside");
  	this.FinshedGoodService.addfinshedgoods(part_json).subscribe(
      data => {
        console.log("Inside");
        console.log(data);
        if (data.length == 0) {
          return;
        }
        console.log(data.quantity);
        for(var i = 0 ; i < data.quantity; i++)
        {
        var mat:JSON = data;
        console.log(mat);
        this.partService.getPart(data.part).subscribe(
          data => {
          console.log(JSON.stringify(data))
          this.parts = data;
          this.partnumber = data.part_number;
          this.partdescription = data.description;
          console.log(this.partnumber);
          console.log(mat);
          
          this.utilityService.printOnZebraPrinterWithParams(mat, this.partnumber, this.partdescription);
          },
        );
        }
      },
      error => {
        console.log(JSON.stringify(error))
        this.loaderService.display(false);
        if (error.status === 401) {
          
        } else {
          var errMessage = JSON.parse(error["_body"]).message;
          
        }
      },
      () => {
        this.loaderService.display(false);
      }
    );
  }




  fetchPartLists() {
    this.partService.listParts().subscribe(
      data => { 
      this.partsMap = data; 
      console.log(this.partsMap);
      },
      error => {
        if (error.status === 401) {
          //this.router.navigate(['']);
        }
        console.log(JSON.stringify(error))
      }
    );
  }

getPart(parts: string){
  //console.log(parts);
  this.partService.getPart(parts).subscribe(
          data => {
          console.log(JSON.stringify(data))
          this.parts = data;
          this.partnumber = data.part_number;
          console.log(this.partnumber);
          return(this.parts);
        },
        error => {
          console.log(JSON.stringify(error))
          this.loaderService.display(false);
          if (error.status === 401) {

          } else {
            var errMessage = JSON.parse(error["_body"]).message;
          }
        },
        () => {
          this.loaderService.display(false);
        }
      );
    }


onChangePartNumber(selectedPart) {
    
  }
}
